




A High Level Overview
of
Delay-Tolerant Networking RFC 4838


By Victor Chimenti
12/8/2018
CPSC 5510 FQ18
Seattle University


 

Introduction

December 7, 2018 is a day that will certainly live in infamy, not for any historical or political reasons, but for the giant leap all of human kind took when the NASA InSight Lander transmitted the first sound of Martian wind back to Earth.  This small step in the history of technology clearly displays an enormous success that has grown from decades of incremental advances in computer networks.
Back on Earth we take for granted our TCP/IP protocols and the ease with which our data hops across a web of routers and switches. Always looking for the next-hop, these devices pass packets closer and closer to their final destination until presto, they arrive like magic. However, we know the details of our terrestrial internet and understand that magic has nothing to do with it. We have fiber, and a 5-Layer OSI Model to move data from end-point applications across the web, through physical layers and back up to the applications that crave it.
This very effective system moves data through congested bottlenecks, provides for security, retransmits lost packets, and guarantees that our data moves from one end-point to another. Hidden in the success of this model however is the simple fact that things don’t always work. Packets do get lost and intruders do violate the sanctity of our data. So how do we solve these same problems when we may also have to account for a propagation delay that includes the 140 million miles between Earth and Mars?
That is the story of Delay/Disruption Tolerant Networking (DTN); the art and science of a store and forward networking protocol that incorporates a new Bundle Layer tucked between the Application and Transport Layers and uses this new layer to overcome the vast and uncertain propagation hurdles awaiting in space. We will see that DTN takes the best of existing internet technology and combines it with peer-to-peer concepts before finally settling on a foundation created by snail-mail superpower; the US Postal Service.
Certainly, there exists a giant leap from the Pony Express mail pouches of old to the InSight Application Data Unit (ADU) that arrived the other day. For CS students though, it is not a very long walk to see how we got here.
 
Motivation
Simply put, DTN applications send messages of arbitrary length using a store-and-forward system. These messages (ADUs) are transformed at the bundle layer into individual units of data called bundles. Bundles are formatted by at least two blocks of data; each block contains either the payload or protocol information much the same way an IP datagram uses its header/payload format.
This seems easy, so why add the Bundle Layer? The answer has to do with the differences between the basic assumptions of network architectures. Internet protocols assume a consistent end-to-end path for the entire exchange. They assume that data loss is minimal and that a single route is sufficient. There is also a basic understanding that although the internet is a distributed system, all routers support the underlying TCP/IP protocols and that web enabled apps are designed to accept existing performance constraints. These assumptions have led to a belief that packet switching is the best choice.


Figure 1. In 2007 the view of The Bundle Protocol sat at the Application Layer of the Internet Model. If the internet is a network of networks, then the Bundle Layer allows an internet of internets.

At this moment in time, those assumptions serve the modern internet well. The packet switched system is fast and reliable, and its security flaws are at least understood while reasonably mitigated. Yet there are many examples of network needs that cannot make these assumptions. Outer-Space notwithstanding, other earthbound needs also require a second take not served by the internet including IoT, autonomous vehicles/craft, remote/rural communities and underwater equipment to name a few. While these end-points cannot make the same assumptions our Transport and Network Layers make, they also wish to interact with them. Home security sensors must be accessible to control via web login, UAVs need route information from Google Map API and the Mars InSight needs to get its information back to Earth where Mission Control can Tweet it to the public.
So, we have a need for an encapsulated system that relies on different assumptions while requiring the ability to assimilate with existing internet functionality. Should we build a whole new model, or develop a new layer that fits within our well-understood system? Our one small step to move current network technology forward a single increment rather than re-inventing the entire wheel is the DTN and Bundle Layer.


Figure 2. The Bundle Layer and the TCP Convergence Layer are nested between the current Application Layer and the Transport Layer. In a Delay/Disruption Tolerant Network the applications are specific DTN Applications that are responsible for providing block information that is later used in custody transfer and other node functions.

DTN understands that long messages and not streams or packets are a better abstraction for the conditions it faces. Although DTN uses hops from one DTN Node to the next much like IP hops between routers, DTN does not expect those nodes to always be available. Although IP is based on store-and-forward, it never expects anything more than a modest queuing and transmission delay. On the contrary, DTN expects that when an ADU arrives, that bundle will persist in its memory for a considerable time as it locates and calculates the next hop. Thus, by using larger message sizes the system is better able to buffer units of data that will actually be useful when returned to the application layer.
This leads to the three basic assumptions of DTN: storage is available and well-distributed, storage is sufficient and robust, and that the store-and-forward model is better than continuous connectivity. So where is this storage? In the node. And that is one reason that DTN bundles can accomplish their mission where TCP/IP cannot. DTN nodes use flash or other memory methods to store large amounts of data while internet routers and switches only have room to buffer.


Functioning
Like a post office then, a DTN node will accept a bundle and store it until it is ready for delivery. Arriving bundles are assigned a priority of bulk, normal or expedited. These priorities are handed down from the application layer and coupled with delivery options. The block header is then populated with more information including a timestamp, useful life indicator, a class of service designator and the length. The nodes use this block to aid in their storage and routing decisions.
To route properly when the end destination is not always available, and the next hop is unknown would it not be helpful if the node could interpret the header block to determine its next contact? Let’s take a look at how a DTN gets the job done.
Delay Tolerant Networks contain nodes and endpoints as we have mentioned. Nodes can be physical or virtual and ultimately applications use the nodes to send or receive their ADUs. The node is an engine for sending and receiving while the endpoints are a set of nodes. Thus, nodes are group members of an endpoint. It is worth repeating; endpoints are a set of nodes.
Within the endpoint the ultimate receiver of the message is called the minimum reception group (MRG). This MRG can be comprised of one node, two nodes or all the nodes in an endpoint. As such an endpoint must be able to route to any number of combinations within its nodes and to achieve this the endpoints are capable of unicast, anycast or multicast protocols. Successful delivery of a message happens when the MRG receives the bundle without error.
While each bundle has a header block, so to must the endpoints be identified. As such each endpoint is assigned a unique Uniform Resource ID called the EID, and it is this EID that a node uses to bind a bundle. However, unlike TCP/IP, DTN binding can occur to a hop or to a lower layer protocol. This happens because the EID can be re-interpreted during transit and this results in a technique called Late Binding. Essentially Late Binding means that the set of destination identifiers does not always bind at the bundle’s source.
In IP, DNS lookup occurs at the source and destination binding occurs before transmission. Since DTNs are a frequently disconnected network… “late binding may be advantageous because the transit time of a message may exceed the validity time of a binding, making binding at the source impossible or invalid."
Think of a DTN as a graph, but since the DTN is very likely connected to a variety of different network types each with its own unique technology it is often described as a multigraph. Unlike the common weighted graph where we calculate cost with only length and direction, the DTN has four cost values; direction, capacity, delay and time. Because nodes are grouped in endpoints and the ultimate receiver of our bundle is the MRG, the vertices must support multiple edges. Hence the name multigraph. The combination of these characteristics gives the DTN graph its ability to route correctly in a Late Binding environment. But how exactly does the node know when to schedule its transmission?
To schedule properly the node must know the contact interval:
At time t, the edge has capacity C(t) and the delay D(t). Assuming that C(t) and D(t) remain stable the bundles arrive by:
			t + D(t) + (1/C(t)) *B
where B are the bits in the edge at time t. We use this calculation to determine an interval:
			[t, t + D(t) + (1/C(t)) *B]
This interval is referred to as a contact. If we take the product of this interval and the capacity, we discover the contact’s volume:
			volume = ([t, t + D(t) + (1/C(t)) *B] * C(t))
“If contacts and their volumes are known ahead of time, intelligent routing and forwarding decisions can be made.”
Within a DTN there are five types of contacts; persistent, on-demand, scheduled, opportunistic and predicted. Imagine a LEO satellite constellation, the members of the constellation could be scheduled or predicted contacts depending on their orbit details and bundles could be exchanged between them as planned. Whereas an opportunistic contact might be a cargo ship on its way to the International Space Station. When the cargo ship passes within range of the constellation, both can exchange bundles during the contact interval.
This transfer of bundles is at the heart of DTN. The movement of bundles is referred to as custody transfer and the nodes receiving them are the custodians. Much like the internet, these bundles typically (but not always) move closer and closer to their destination using the custodians to store, retransmit and protect their payload until the “unacknowledged, prioritized”  message is delivered.
Since DTNs objective is to propagate bundles across long delays in a frequently disconnected network where the receiver is an MRG, the unique feature of late binding in a multigraph structure gives it a distinct advantage over TCP/IP alone where early binding before transmission and single edge graph vertices are required.


Analysis
The primary advantage of a DTN is that it can send and receive data when the next hop and possibly the destination is not clearly known. There are many ground-based applications that I expect will take advantage of this fact. In fact, if self-driving cars are to become the norm in our society, a DTN is almost essential to predict their trajectories in my opinion.
But first, just take DTN for what it was designed to do: space communication. It is hard to envision a better platform at this moment in time. NASA has been using either a direct or single relay system since its inception. By making a transition to the Solar System Internet (SSI) NASA envisions they will need to implement an internet-like network protocol and what better technology to choose than one that’s been proven. By merging the Bundle Layer into the OSI Model, they make their SSI compatible with the internet and give their nodes the ability to properly route traffic over multiple mediums in the face of significant delays and disruptions.
What if the designers instead of building a new layer decided to add the bundle protocols to TCP? Or make an alternative protocol like we have with TCP vs UDP? (Say TCP vs UDP vs DTN?) They would not have attained the same functionality. By creating the bundle layer, they allow application programmers to design apps specifically for the DTN while focusing functionality at the Bundle Layer for what is intended, overcoming the large delays and uncertainty that TCP/IP are not capable of addressing.
As we sit here today, we know DTN works, what we don’t know yet is the scope of its limitations. With web compatibility, what rouge actors might appear from nowhere and commandeer our assets? It is hard to say, but we certainly know any system that interfaces with the public is susceptible to intruders and malware. In this paper we did not discuss the security profile of the Bundle Layer. The idea put forward that nodes will discard traffic if authentication fails is a good idea, but the investment necessary to send hardware into outer-space necessitates a robust mechanism in the nodes beyond that described in RFC 4838.



Image 1. On the left image NASA missions have used direct or single relay communication, but future missions will require Internet-like communication like the image on the right. The Disruption Tolerant Network protocols will enable the Solar System Internet, allowing data to be stored in nodes until transmission is successful.


Conclusions
In 1972 RFC 346 implied that because of a satellite’s propagation delay machines on an ARPANET-like system would be unusable. A lot has changed since then. Although propagation delays haven’t, the technology to send messages between endpoints successfully and with reasonable security is already here.
The ability to encapsulate application information, send it across the vast reaches of space when the path is not yet known, have it unpacked and interfaced with existing TCP/IP and Link Layer protocols correctly and efficiently is perhaps the 9th Wonder of the World.
I regret that this paper only scratches the surface of Delay Tolerant Networks. Of the topics we discussed we hardly touched the tip of the iceberg, and the topics we did not touch are many. Congestion Control, Priority Classes, Security, Fragmentation, Registration, and URI Naming along with a deeper dive into Custody and Contacts are on my wish list of further reading.

References
Cerf, V. G. (2007, April). Request for Comments: 4838. Retrieved from The IETF Trust: https://tools.ietf.org/pdf/rfc4838.pdf
